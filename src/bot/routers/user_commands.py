from textwrap import dedent

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from src.bot.fsm import SourcesFSM
from src.bot.keyboards.common_keyboards import get_main_kb, get_cancel_kb
from src.utils.validators import UrlValidator
from src.database.requests import set_sources, select_user_sources

router = Router(name=__name__)

@router.message(F.text == "üì• –ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
async def show_sources(message: types.Message):
    sources = await select_user_sources(message.chat.id)

    if not sources:
        return await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ üì≠")

    response = [f"–í–∞—à–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: ({len(sources)})", *[f"üîó {source.url}" for source in sources]]


    return await message.answer(
        text="\n".join(response),
        reply_markup=get_main_kb(),
        disable_web_page_preview=True,
    )

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
@router.message(Command("add"))
async def cmd_add(message: types.Message, state: FSMContext):
    await state.set_state(SourcesFSM.WAITING_FOR_URL)

    add_text = dedent("""
    üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ù–∞–ø—Ä–∏–º–µ—Ä:
    t.me/–∫–∞–Ω–∞–ª1, https://t.me/–∫–∞–Ω–∞–ª2, @–∫–∞–Ω–∞–ª3 ...
    """).strip()

    return await message.answer(
        text=add_text,
        reply_markup=get_cancel_kb(),
        disable_web_page_preview=True
    )

@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
async def delete_sources(message: types.Message, state: FSMContext):
    ...

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@router.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    if await state.get_state() is None:
        return None

    await state.clear()

    return await message.answer(
        text="–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_main_kb()
    )

@router.message(SourcesFSM.WAITING_FOR_URL)
async def on_source_add(message: types.Message, state: FSMContext):
    raw_urls = [url.strip() for url in message.text.split(",")]

    valid_urls = set()
    # unknown_urls = []
    invalid_urls = []
    existing_urls = [source.url for source in await select_user_sources(message.from_user.id)]
    not_added_urls = set()

    for url in raw_urls:
        is_valid, normalized = UrlValidator.validate_telegram_channel(url)
        if is_valid and normalized not in existing_urls:
            valid_urls.add(normalized)
        elif is_valid:
            not_added_urls.add(normalized)
        else:
            invalid_urls.append(url)

    if valid_urls:
        await set_sources(message.from_user.id, valid_urls)


    response = []
    if valid_urls:
        response.append("‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n" + "\n".join(valid_urls))
    elif not not_added_urls:
        response.append("‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫")

    if valid_urls and invalid_urls:
        response.append("‚ùå –ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n" + "\n".join(invalid_urls))

    if not_added_urls:
        response.append("üìù –£–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n" + "\n".join(not_added_urls))

    await message.answer(
        text="\n\n".join(response),
        reply_markup=get_main_kb(),
        disable_web_page_preview=True
    )

    await state.clear()